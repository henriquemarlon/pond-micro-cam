basePath: /api/v1
definitions:
  dto.CreateUserInputDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.CreateUserOutputDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.FindUserOutputDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.LoginInputDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.LoginOutputDTO:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      token:
        type: string
    type: object
host: localhost
info:
  contact:
    email: gomedicine@inteli.edu.br
    name: Manager API Support
    url: https://github.com/henriquemarlon/pond-micro-cam/backend
  description: This is a.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Ponderada API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login a User
      parameters:
      - description: User entity
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginOutputDTO'
      summary: Login a User
      tags:
      - Login
  /user:
    get:
      consumes:
      - application/json
      description: Retrieve all User entities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.FindUserOutputDTO'
            type: array
      summary: Retrieve all User entities
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new User entity
      parameters:
      - description: User entity to create
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateUserOutputDTO'
      summary: Create a new User entity
      tags:
      - Users
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a User entity by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindUserOutputDTO'
      summary: Retrieve a User entity by ID
      tags:
      - Users
swagger: "2.0"
